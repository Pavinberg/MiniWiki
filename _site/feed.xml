<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>MiniWiki</title>
    
    
    <link>/miniwiki</link>
    <atom:link href="/miniwiki/feed.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>新手篇：编辑器的选择</title>
        <description>
          编辑器 or IDE - 
          所谓工欲善其事，必先利其器。程序员想写好代码，一个顺手的编辑器必不可少。新手总会被这样的问题困扰：什么是 IDE，什么是编辑器，又应该怎么选择呢？本文将做一个简单的归纳，抛砖引玉。 编辑器 编辑器就是能编辑文字的就是编辑器，所以 Office Word、记事本都算是编辑器。那么我们为什么不能用它们写代码呢？答案是，可以，但它不顺手。因为代码是一个对人不友好的东西，内容复杂、要求精准细心，所以我们需要一定的辅助。 于是正宗的代码编辑器会提供语法高亮、自动补全、语法检查等等方便好用的功能，大大提高写代码的效率。并且，由于不同的编程语言、不同的开发环境、不同的场景需求，分别又需要不同额外的功能，所以主流编辑器都会有一个丰富的插件社区，你需要什么方面的功能，就安装相应的插件。 IDE IDE 是集成开发环境的缩写。 所谓集成就是所有相关的功能都组合在一起的意思。当你要做一个特定的项目，其实有一些很常用的功能需要经常使用，如果你使用编辑器，就需要一一安装相关插件，并且插件之间有可能存在依赖关系和潜在矛盾，组织起来并不是百分百的顺利。于是一些常见的场景，可以直接把所有你可能需要的功能都打包在一起，构成一个大软件，直接给你开箱即用，不需要做过多的配置。 对比 对于新手而言，一开始一定会觉得 IDE 是好的。没错，一个所有功能都齐全的强大的工具，新手用起来会比较轻松；而编辑器需要慢慢地打磨和配置，需要时间的积累。因此从纯粹的功能的角度来看，的确 IDE 优于一般编辑器。但是二者也有各自的优劣。 IDE 的主要缺点在于： 由于功能齐全，软件十分庞大，启动速度缓慢，占用资源很多。就是，吃性能、费电。 一个 IDE 往往只针对某一语言、某一开发场景的，如果你有多种开发需求，可能需要安装多个 IDE。 好的 IDE 多是几家大公司的商业产品，大部分需要付费（当然对于我们学生来说有教育版往往是免费的）。 编辑器的优势在于： 大部分开源免费。运行起来占用资源小。 定制化程度很高，可以按自己习惯打磨，保留需要的功能，不必安装不需要的功能，适合有程序洁癖者。 扩展性强，一个编辑器通常能应对非常多的场景。 怎么选 小孩子才做选择，成年人全都要。你在学习的时候逐渐就会有一个主要的开发方向，可以针对这个方向使用一个 IDE。同时，你也不会只做这一件事，其它事情就可以用通用编辑器一起解决。例如对于计科 NJUer 来说，一开始会学习 C 和 C++，那么针对这个选择一个 IDE，例如 Visual Studio。然后你平时可能需要写 Python、shell 脚本、Latex 等等，那就可以使用一个编辑器完成这些杂七杂八的事情。 一些常见编辑器/IDE 推荐 编辑器 Visual Studio...
        </description>
        <pubDate>Sat, 21 Aug 2021 00:00:00 +0800</pubDate>
        <link>/miniwiki/2021-08-21-editor/</link>
        <guid isPermaLink="true">/miniwiki/2021-08-21-editor/</guid>
      </item>
    
      <item>
        <title>Python 技巧：活用函数对象</title>
        <description>
          如何写一个 switch 语句 - 
          Python 作为最近非常热门的语言，网络上有着许多相关教程。这里分享一些网上不常见的、但在我个人使用过程中感受到十分有趣的好用用法：如何灵活运用函数对象这个概念。 前情提要 这篇博客解释了 Python 中的函数对象的相关概念。简单来说，Python 中函数也是一个对象，具备 id、类型和值。通俗来讲，就是函数和一个普通变量没有区别，所以你可以把一个函数作为参数传递、作为变量赋值等等。 &amp;gt;&amp;gt;&amp;gt; def func(): ... print(&quot;Hello, world.&quot;) ... &amp;gt;&amp;gt;&amp;gt; hello = func # 赋值 &amp;gt;&amp;gt;&amp;gt; hello() Hello, world. 如何写一个 switch 语句 C/C++、Java 等语言中有 switch 分支语句，作为 if 分支语句的补充。在更为现代的语言如 Rust、Scala 等语言中有 match 语句做分支匹配。但 Python 只有 if。例如，在有很多个分支时，通常 Python 会这样写： if foo == 1: run1() elif foo...
        </description>
        <pubDate>Thu, 19 Aug 2021 00:00:00 +0800</pubDate>
        <link>/miniwiki/2021-08-19-python-trick-switch/</link>
        <guid isPermaLink="true">/miniwiki/2021-08-19-python-trick-switch/</guid>
      </item>
    
      <item>
        <title>ripgrep</title>
        <description>
          更快捷的搜索 - 
          使用 Linux 时想从许多文件中搜索关键词怎么办？Linux 本身有着 grep 命令可以完成这一任务。但 grep 较为古老，使用不便且效率较低，本文介绍一个更为现代的搜索工具：ripgrep。 ripgrep 是一个替代 grep （或者说 GNU grep）命令的搜索工具。其主要特点是命令的使用更为方便实用，以及搜索性能极高，在庞大的项目中有着出色的表现。并且默认可以忽略 .gitignore 文件中的内容，非常实用。 对网上的帖子的避雷： 官网是最好的。不知道为什么百度/谷歌到的第一条中文帖子居然教导大家先安装 Rust 再用 cargo 安装 ripgrep，愚蠢。虽然 ripgrep 是用 Rust 写的，但早已可以在多种系统下直接安装，不需要安装 Rust。为了新手友好以下简略介绍一下基础使用。 所需背景知识： 本文前半部分（安装、常用用法）会基础的 Linux 操作即可。 后半部分（深入细节）是原理分析，需要一点计算机体系结构、操作系统、算法等基础知识，为对原理感兴趣的同学抛砖引玉。 安装 详见 GitHub repo 安装说明。对于大部分系统可以直接使用包管理工具安装（例如 macOS 可用 Homebrew ）。除非你使用 Rust 否则不必使用 cargo 进行安装。 特别的，如果你使用 Debian 10 以下或...
        </description>
        <pubDate>Wed, 18 Aug 2021 00:00:00 +0800</pubDate>
        <link>/miniwiki/2021-08-18-ripgrep/</link>
        <guid isPermaLink="true">/miniwiki/2021-08-18-ripgrep/</guid>
      </item>
    
  </channel>
</rss>
